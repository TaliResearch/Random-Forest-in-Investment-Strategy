"""
This code fetches historical stock price data for Apple Inc. from Yahoo Finance, 
calculates technical indicators such as Simple Moving Averages (SMA) and 
Relative Strength Index (RSI), creates a target variable indicating whether 
the future price will increase or decrease, trains a Random Forest classifier
using these features, makes predictions, and evaluates the model's accuracy.
"""


# Also see readme file in this repo for explanation of how it works.

# Importing necessary libraries
import yfinance as yf
import numpy as np
import pandas as pd
import datetime
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Function to fetch historical stock data
def fetch_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

# Function to create features
def create_features(data):
    data['SMA_50'] = data['Close'].rolling(window=50).mean()
    data['SMA_200'] = data['Close'].rolling(window=200).mean()
    data['RSI'] = calculate_rsi(data['Close'], 14)
    return data.dropna()

# Function to calculate Relative Strength Index (RSI)
def calculate_rsi(data, window):
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

# Function to create target variable
def create_target(data, horizon=5):
    data['Future_Price'] = data['Close'].shift(-horizon)
    data['Target'] = np.where(data['Future_Price'] > data['Close'], 1, 0)
    return data.dropna()

# Function to train Random Forest model
def train_model(features, target):
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model, X_test, y_test

# Function to make predictions
def make_predictions(model, X_test):
    predictions = model.predict(X_test)
    return predictions

# Function to evaluate model performance ito accuracy
def evaluate_model(y_test, predictions):
    accuracy = accuracy_score(y_test, predictions)
    return accuracy

# Function to fetch historical stock data
def fetch_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

# Function to monitor performance over time
def monitor_performance(ticker, start_date, end_date, horizon):
    performance = []
    returns = []
    while end_date <= datetime.datetime.today():
        data = fetch_stock_data(ticker, start_date, end_date)
        data = create_features(data)
        data = create_target(data, horizon)
        features = data[['SMA_50', 'SMA_200', 'RSI']]
        target = data['Target']
        model, X_test, y_test = train_model(features, target)
        predictions = make_predictions(model, X_test)
        accuracy = evaluate_model(y_test, predictions)
        performance.append((end_date, accuracy))
        
        # Calculate daily return
        daily_return = data['Future_Price'].pct_change().shift(-1) * predictions
        returns.extend(daily_return)
        
        start_date = end_date
        end_date += datetime.timedelta(days=1)  # Increment by one day for daily monitoring
    
    # Calculate cumulative returns
    cumulative_returns = (1 + returns).cumprod() - 1
    
    # Calculate Sharpe ratio
    sharpe_ratio = np.sqrt(252) * (np.mean(returns) / np.std(returns))
    
    # Calculate profit and loss (P&L)
    total_pnl = cumulative_returns[-1] - 1
    
    return performance, cumulative_returns, sharpe_ratio, total_pnl

# Main function
def main():
    ticker = 'AAPL'  # Example: Apple Inc. stock
    start_date = datetime.datetime(2020, 1, 1)
    end_date = datetime.datetime(2022, 1, 1)
    horizon = 5  # Number of days for future price prediction
    performance, cumulative_returns, sharpe_ratio, total_pnl = monitor_performance(ticker, start_date, end_date, horizon)
    
    # Print performance metrics
    print(f"Sharpe Ratio: {sharpe_ratio}")
    print(f"Total Profit/Loss: {total_pnl * 100:.2f}%")
    
    # Plot cumulative returns
    plt.plot(cumulative_returns)
    plt.xlabel('Date')
    plt.ylabel('Cumulative Returns')
    plt.title('Cumulative Returns of the Trading Strategy')
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    main()


   
"""
Please note that this test case model is simplified and needs refinement and due testing
and development process before being suitable 
for actual trading purposes without further exploration, risk management, 
and validation. Additionally, it's crucial to comply with data usage 
policies and consider transaction costs, slippage, and other practical
aspects of trading when implementing such strategies.
"""
