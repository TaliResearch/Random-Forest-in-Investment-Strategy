#see readme file in this repo for explanation of how it works.

# Importing necessary libraries
import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Function to fetch historical stock data
def fetch_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

# Function to create features
def create_features(data):
    data['SMA_50'] = data['Close'].rolling(window=50).mean()
    data['SMA_200'] = data['Close'].rolling(window=200).mean()
    data['RSI'] = calculate_rsi(data['Close'], 14)
    return data.dropna()

# Function to calculate Relative Strength Index (RSI)
def calculate_rsi(data, window):
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

# Function to create target variable
def create_target(data, horizon=5):
    data['Future_Price'] = data['Close'].shift(-horizon)
    data['Target'] = np.where(data['Future_Price'] > data['Close'], 1, 0)
    return data.dropna()

# Function to train Random Forest model
def train_model(features, target):
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model, X_test, y_test

# Function to make predictions
def make_predictions(model, X_test):
    predictions = model.predict(X_test)
    return predictions

# Function to evaluate model performance
def evaluate_model(y_test, predictions):
    accuracy = accuracy_score(y_test, predictions)
    return accuracy

# Main function
def main():
    # Fetch historical data
    ticker = 'AAPL'  # Example: Apple Inc. stock
    start_date = '2020-01-01'
    end_date = '2022-01-01'
    data = fetch_stock_data(ticker, start_date, end_date)
    
    # Create features
    data = create_features(data)
    
    # Create target variable
    data = create_target(data)
    
    # Select features and target
    features = data[['SMA_50', 'SMA_200', 'RSI']]
    target = data['Target']
    
    # Train model
    model, X_test, y_test = train_model(features, target)
    
    # Make predictions
    predictions = make_predictions(model, X_test)
    
    # Evaluate model performance
    accuracy = evaluate_model(y_test, predictions)
    print(f"Accuracy: {accuracy}")

if __name__ == "__main__":
    main()
